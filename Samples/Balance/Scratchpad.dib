#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

Add the AngouriMath package and reference it.

#!csharp

#r "nuget:AngouriMath, *-*"
using AngouriMath; using AngouriMath.Extensions; using static AngouriMath.MathS; using static AngouriMath.Entity; using System; using static System.Console;
using AngouriMath.Core.Compilation; using AngouriMath.Core; using AngouriMath.Core.Compilation.IntoLinq;  using static AngouriMath.Entity.Number;
//Decided not to use MathNet
//#r "nuget: MathNet.Symbolics, 0.24.0"
//using Complex = System.Numerics.Complex; using MathNet.Symbolics; using Expr = MathNet.Symbolics.SymbolicExpression; using MathNet.Numerics; using MathNet.Numerics.Interpolation;

#!markdown

Add in the helpers used in the [Balance](https://github.com/aquafir/ACE.BaseMod/tree/master/Samples/Balance) mod.

#!csharp

    public static string CompileFriendly(this string formula) => formula.Replace(" if ", " provided ").Replace("P(", "piecewise(");
    private static bool TryGetFunction<T1, TResult>(this string formula, out Func<T1, TResult> func, params string[] names)
    {
        func = null;

        if (names.Length != 1)
            return false;

        try
        {
            func = formula.CompileFriendly().Compile<T1, TResult>(names[0]);
            return true;
        }
        catch (Exception ex)
        {
            return false;
        }
    }
    private static bool TryGetFunction<T1, T2, TResult>(this string formula, out Func<T1, T2, TResult> func, params string[] names)
    {
        func = null;

        if (names.Length != 2)
            return false;

        try
        {
            func = formula.CompileFriendly().Compile<T1, T2, TResult>(names[0], names[1]);
            return true;
        }
        catch (Exception ex)
        {
            return false;
        }
    }
    private static bool TryGetFunction<T1, T2, T3, TResult>(this string formula, out Func<T1, T2, T3, TResult> func, params string[] names)
    {
        func = null;

        if (names.Length != 3)
            return false;

        try
        {
            func = formula.CompileFriendly().Compile<T1, T2, T3, TResult>(names[0], names[1], names[2]);
            return true;
        }
        catch (Exception ex)
        {
            return false;
        }
    }
    private static bool TryGetFunction<T1, T2, T3, T4, TResult>(this string formula, out Func<T1, T2, T3, T4, TResult> func, params string[] names)
    {
        func = null;

        if (names.Length != 4)
            return false;

        try
        {
            func = formula.CompileFriendly().Compile<T1, T2, T3, T4, TResult>(names[0], names[1], names[2], names[3]);
            return true;
        }
        catch (Exception ex)
        {
            return false;
        }
    }
    private static bool TryGetFunction<T1, T2, T3, T4, T5, TResult>(this string formula, out Func<T1, T2, T3, T4, T5, TResult> func, params string[] names)
    {
        func = null;

        if (names.Length != 5)
            return false;

        try
        {
            func = formula.CompileFriendly().Compile<T1, T2, T3, T4, T5, TResult>(names[0], names[1], names[2], names[3], names[4]);
            return true;
        }
        catch (Exception ex)
        {
            return false;
        }
    }
    private static bool TryGetFunction<T1, T2, T3, T4, T5, T6, TResult>(this string formula, out Func<T1, T2, T3, T4, T5, T6, TResult> func, params string[] names)
    {
        func = null;

        if (names.Length != 6)
            return false;

        try
        {
            func = formula.CompileFriendly().Compile<T1, T2, T3, T4, T5, T6, TResult>(names[0], names[1], names[2], names[3], names[4], names[5]);
            return true;
        }
        catch (Exception ex)
        {
            return false;
        }
    }
    private static bool TryGetFunction<T1, T2, T3, T4, T5, T6, T7, TResult>(this string formula, out Func<T1, T2, T3, T4, T5, T6, T7, TResult> func, params string[] names)
    {
        func = null;

        if (names.Length != 7)
            return false;

        try
        {
            func = formula.CompileFriendly().Compile<T1, T2, T3, T4, T5, T6, T7, TResult>(names[0], names[1], names[2], names[3], names[4], names[5], names[6]);
            return true;
        }
        catch (Exception ex)
        {
            return false;
        }
    }
    private static bool TryGetFunction<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this string formula, out Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func, params string[] names)
    {
        func = null;

        if (names.Length != 8)
            return false;

        try
        {
            func = formula.CompileFriendly().Compile<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(names[0], names[1], names[2], names[3], names[4], names[5], names[6], names[7]);
            return true;
        }
        catch (Exception ex)
        {
            return false;
        }
    }
    //Variable names through array: (typeof(double), "x"), ...
    private static bool TryGetFunction<T1, TResult>(this string formula, out Func<T1, TResult> func, List<(Type, Variable)> typesAndNames)
    {
        try
        {
            func = formula.CompileFriendly().Compile<Func<T1, TResult>>(new CompilationProtocol(), typeof(TResult), typesAndNames);
            return true;
        }
        catch (Exception ex)
        {
            func = null;
            return false;
        }
    }
    private static bool TryGetFunction<T1, T2, TResult>(this string formula, out Func<T1, T2, TResult> func, List<(Type, Variable)> typesAndNames)
    {
        try
        {
            func = formula.CompileFriendly().Compile<Func<T1, T2, TResult>>(new CompilationProtocol(), typeof(TResult), typesAndNames);
            return true;
        }
        catch (Exception ex)
        {
            func = null;
            return false;
        }
    }
    private static bool TryGetFunction<T1, T2, T3, TResult>(this string formula, out Func<T1, T2, T3, TResult> func, List<(Type, Variable)> typesAndNames)
    {
        try
        {
            func = formula.CompileFriendly().Compile<Func<T1, T2, T3, TResult>>(new CompilationProtocol(), typeof(TResult), typesAndNames);
            return true;
        }
        catch (Exception ex)
        {
            func = null;
            return false;
        }
    }
    private static bool TryGetFunction<T1, T2, T3, T4, TResult>(this string formula, out Func<T1, T2, T3, T4, TResult> func, List<(Type, Variable)> typesAndNames)
    {
        try
        {
            func = formula.CompileFriendly().Compile<Func<T1, T2, T3, T4, TResult>>(new CompilationProtocol(), typeof(TResult), typesAndNames);
            return true;
        }
        catch (Exception ex)
        {
            func = null;
            return false;
        }
    }
    private static bool TryGetFunction<T1, T2, T3, T4, T5, TResult>(this string formula, out Func<T1, T2, T3, T4, T5, TResult> func, List<(Type, Variable)> typesAndNames)
    {
        try
        {
            func = formula.CompileFriendly().Compile<Func<T1, T2, T3, T4, T5, TResult>>(new CompilationProtocol(), typeof(TResult), typesAndNames);
            return true;
        }
        catch (Exception ex)
        {
            func = null;
            return false;
        }
    }
    private static bool TryGetFunction<T1, T2, T3, T4, T5, T6, TResult>(this string formula, out Func<T1, T2, T3, T4, T5, T6, TResult> func, List<(Type, Variable)> typesAndNames)
    {
        try
        {
            func = formula.CompileFriendly().Compile<Func<T1, T2, T3, T4, T5, T6, TResult>>(new CompilationProtocol(), typeof(TResult), typesAndNames);
            return true;
        }
        catch (Exception ex)
        {
            func = null;
            return false;
        }
    }
    private static bool TryGetFunction<T1, T2, T3, T4, T5, T6, T7, TResult>(this string formula, out Func<T1, T2, T3, T4, T5, T6, T7, TResult> func, List<(Type, Variable)> typesAndNames)
    {
        try
        {
            func = formula.CompileFriendly().Compile<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>(new CompilationProtocol(), typeof(TResult), typesAndNames);
            return true;
        }
        catch (Exception ex)
        {
            func = null;
            return false;
        }
    }
    private static bool TryGetFunction<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this string formula, out Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func, List<(Type, Variable)> typesAndNames)
    {
        try
        {
            func = formula.CompileFriendly().Compile<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>(new CompilationProtocol(), typeof(TResult), typesAndNames);
            return true;
        }
        catch (Exception ex)
        {
            func = null;
            return false;
        }
    }
    //Use enum of Angouri-supported types
    public static bool TryGetFunction<T1, TResult>(this string formula, out Func<T1, TResult> func, List<(MType, Variable)> typesAndNames) =>
        formula.TryGetFunction<T1, TResult>(out func, typesAndNames.Select(x => (x.Item1.GetAngouriType(), x.Item2)).ToList());
    public static bool TryGetFunction<T1, T2, TResult>(this string formula, out Func<T1, T2, TResult> func, List<(MType, Variable)> typesAndNames) =>
        formula.TryGetFunction<T1, T2, TResult>(out func, typesAndNames.Select(x => (x.Item1.GetAngouriType(), x.Item2)).ToList());
    public static bool TryGetFunction<T1, T2, T3, TResult>(this string formula, out Func<T1, T2, T3, TResult> func, List<(MType, Variable)> typesAndNames) =>
        formula.TryGetFunction<T1, T2, T3, TResult>(out func, typesAndNames.Select(x => (x.Item1.GetAngouriType(), x.Item2)).ToList());
    public static bool TryGetFunction<T1, T2, T3, T4, TResult>(this string formula, out Func<T1, T2, T3, T4, TResult> func, List<(MType, Variable)> typesAndNames) =>
        formula.TryGetFunction<T1, T2, T3, T4, TResult>(out func, typesAndNames.Select(x => (x.Item1.GetAngouriType(), x.Item2)).ToList());
    public static bool TryGetFunction<T1, T2, T3, T4, T5, TResult>(this string formula, out Func<T1, T2, T3, T4, T5, TResult> func, List<(MType, Variable)> typesAndNames) =>
        formula.TryGetFunction<T1, T2, T3, T4, T5, TResult>(out func, typesAndNames.Select(x => (x.Item1.GetAngouriType(), x.Item2)).ToList());
    public static bool TryGetFunction<T1, T2, T3, T4, T5, T6, TResult>(this string formula, out Func<T1, T2, T3, T4, T5, T6, TResult> func, List<(MType, Variable)> typesAndNames) =>
        formula.TryGetFunction<T1, T2, T3, T4, T5, T6, TResult>(out func, typesAndNames.Select(x => (x.Item1.GetAngouriType(), x.Item2)).ToList());
    public static bool TryGetFunction<T1, T2, T3, T4, T5, T6, T7, TResult>(this string formula, out Func<T1, T2, T3, T4, T5, T6, T7, TResult> func, List<(MType, Variable)> typesAndNames) =>
        formula.TryGetFunction<T1, T2, T3, T4, T5, T6, T7, TResult>(out func, typesAndNames.Select(x => (x.Item1.GetAngouriType(), x.Item2)).ToList());
    public static bool TryGetFunction<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this string formula, out Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func, List<(MType, Variable)> typesAndNames) =>
        formula.TryGetFunction<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(out func, typesAndNames.Select(x => (x.Item1.GetAngouriType(), x.Item2)).ToList());
    static Type GetAngouriType(this MType angouriType) => angouriType switch
        {
            MType.Bool => typeof(bool),
            MType.Int => typeof(int),
            MType.Long => typeof(long),
            MType.Float => typeof(float),
            MType.Double => typeof(double),
            MType.Complex => typeof(Complex),
            MType.BigInt => typeof(System.Numerics.BigInteger),
            _ => throw new NotImplementedException()
        };

    /// <summary>
    /// Converts a serializable variable dictionary to the tuple used by AngouriMath
    /// </summary>
    public static List<(MType, Variable)> TypesAndNames(this Dictionary<string, MType> variables) => variables.Select(x => (x.Value, (Variable)x.Key)).ToList();
/// <summary>
/// Types with built-in AngouriMath support
/// </summary>
public enum MType
{
    Bool,
    Int,
    Long,
    Float,
    Double,
    Complex,
    BigInt
};

#!markdown

Not all of the capabilities of [AngouriMath]](https://am.angouri.org/docs/namespaces.html) are supported through their string compilation, but a decent amount do and the syntax is reasonably intuitive.
* Some constants or functions exist: 
  
  `sin(pi)`
* Piecewise functions let you do some logic:
  
  `P(10 if x>10, 0 if x<10, x)` would clamp a value to 0-10
* Capabilities exist for solving equations
* You can display simplified/solved/LaTeX versions of formulas:
  
  `(MathString)@"H← 60 + \frac{30(B−R)}{Vmax−Vmin}  , if Vmax = G"`

* You can also display HTML/CSS, use SQL/JS/etc. in polyglot notebooks.
  * HTML("<b style=\"color:blue\">Hello!</b>")
  * Javascript(@"alert(""Hello!"");")
  * CSS "h2 { color: darkslategrey; }"

#!csharp

//Formula and variables for armor rating
var formula ="P(200/3 / (x + 200/3) if x > 0, (1-x)/(200/3x) if x < 0, 1)";
//Hack-approach to convert some of the uglier syntax (e.g., "piecewise" and "provided" --> "P" and "if")
formula = formula.CompileFriendly();
var variables = new Dictionary<string, MType>()
{
    ["x"] = MType.Float,    // armor level
                            // Converts AL from an additive linear value to a scaled damage multiplier
};
//Variables/Types are converted to List<(MType, Variable)> used by Angouri
var typesAndNames = variables.TypesAndNames();

//You can compile other ways:
//formula.CompileFriendly().Compile<float, float>("x");

//Helpers exist to make the standard use easier
 if(!formula.TryGetFunction<float, float>(out var func, typesAndNames))  {
    display("Comilation problem");
    return;
 }

//Use the function
display($"0AL {func(0)}\n500 AL {func(500)}\n-100 AL {func(-100)}");

//Simplify and display the formula
var simplified = formula.Simplify().Stringize();
display(simplified);
//Or in LaTeX 
//(LaTeXString)formula.Simplify().Latexise()
(MathString)formula.Simplify().Latexise()

#!markdown

If string compilation doesn't support the [Angouri feature](https://am.angouri.org/wiki/) you're interested in, you can do it in code.

There is support for linear algebra, calculus, and other goodness as well.

#!csharp

WriteLine("2 + 3 is " + "2 + 3".EvalNumerical().Stringize());
WriteLine("x + 3 + 4 + x + 2x + 23 + a".Simplify().Stringize());
//Build an expression
var x = Var("x");
var expr = Sin(x) + Sqrt(x) + Integral(Sin(Sin(x)), x);
WriteLine(expr.Stringize());
// Solve a simple equation
WriteLine("x2 = 3".Solve("x").Stringize());
// Solve a complicated statement
WriteLine("(x - 2)(x - 3) = 0 and (x - 1)(x - 2) = 0".Solve("x").InnerSimplified.Stringize());
WriteLine("sin(a x)2 + c sin(2 a x) = c".Solve("x"));

#!markdown

The variations of the Angouri helpers are generated with the templates below.

#!csharp

    using System.Text.RegularExpressions;
    //Providing variable names
    var t = $$"""
    public static bool TryGetFunction<T1, TResult>(this string formula, out Func<T1, TResult> func, params string[] names)
    {
        func = null;

        if (names.Length != 1)
            return false;

        try
        {
            func = formula.CompileFriendly().Compile<T1, TResult>(names[0]);
            return true;
        }
        catch (Exception ex)
        {
            return false;
        }
    }
""";
//With type/Name IEnumerable
t = $$"""
    public static bool TryGetFunction<T1, TResult>(this string formula, out Func<T1, TResult> func, List<(Type, Variable)> typesAndNames)
    {
        try
        {
            func = formula.Compile<Func<T1, TResult>>(new CompilationProtocol(), typeof(TResult), typesAndNames);
            return true;
        }
        catch (Exception ex)
        {
            func = null;
            return false;
        }
    }
""";
//Enum of Angouri-supported types
t = $$"""
    public static bool TryGetFunction<T1, TResult>(this string formula, out Func<T1, TResult> func, List<(MType, Variable)> typesAndNames) =>
        formula.TryGetFunction<T1, TResult>(out func, typesAndNames.Select(x => (x.Item1.GetAngouriType(), x.Item2)).ToList());
""";

var sb = new StringBuilder();
for(var i = 1; i < 9; i++) {
    sb.AppendLine(t);
    t = Regex.Replace(t, "T" + i, $"T{i}, T{i+1}");
    t = Regex.Replace(t, "!= " + i, "!= " + (i+1));
    t = Regex.Replace(t, @$"names\[{i-1}\]", $"names[{i-1}], names[{i}]");
}

sb.ToString()
